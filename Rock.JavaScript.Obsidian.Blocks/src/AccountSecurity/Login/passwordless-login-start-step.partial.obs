<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockForm @submit="onPasswordlessLoginStartSubmitted">
        <TextBox
            v-model="emailOrPhoneNumber"
            :disabled="disabled"
            formGroupClasses="required-indicator-hidden"
            label="Email or Phone"
            rules="required|or:email,phone"></TextBox>

        <RockButton
            :btnType="buttonType.primary"
            :class="isMobileForced ? 'w-100' : 'w-100 d-sm-none'"
            :disabled="disabled"
            type="submit">Continue</RockButton>
        <RockButton
            v-if="!isMobileForced"
            :btnType="buttonType.primary"
            class="d-none d-sm-inline-block"
            :disabled="disabled"
            type="submit">Continue</RockButton>
    </RockForm>
</template>

<script setup lang="ts">
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockForm from "@Obsidian/Controls/rockForm";
    import TextBox from "@Obsidian/Controls/textBox";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { isEmail } from "@Obsidian/Utility/email";
    import { isPhone } from "@Obsidian/Utility/phoneNumber";
    import { PasswordlessLoginStartRequestBag } from "@Obsidian/ViewModels/Blocks/AccountSecurity/Login/passwordlessLoginStartRequestBag";
    import { computed, PropType } from "vue";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PasswordlessLoginStartRequestBag>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "start"): void,
        (e: "update:modelValue", _value: PasswordlessLoginStartRequestBag): void
    }>();

    //#region Values

    const buttonType = {
        primary: BtnType.Primary
    };

    //#endregion

    //#region Computed Values

    const emailOrPhoneNumber = computed({
        get() {
            return props.modelValue.email ?? props.modelValue.phoneNumber ?? "";
        },
        set(newValue: string) {
            const isEmailAddress = isEmail(newValue);
            const isPhoneNumber = !isEmailAddress ? isPhone(newValue) : false;

            if (isEmailAddress || isPhoneNumber) {
                // Update email or phone on the model when the email or phone field is valid.
                emit("update:modelValue", {
                    ...props.modelValue,
                    email: isEmailAddress ? newValue : null,
                    phoneNumber: isPhoneNumber ? newValue : null,
                    shouldSendEmailCode: isEmailAddress,
                    shouldSendEmailLink: isEmailAddress,
                    shouldSendSmsCode: isPhoneNumber
                });
            }
            else if (!!props.modelValue.email || !!props.modelValue.phoneNumber) {
                // Clear the email & phone on the model when the email or phone field is not valid.
                emit("update:modelValue", {
                    ...props.modelValue,
                    email: null,
                    phoneNumber: null,
                    shouldSendEmailCode: false,
                    shouldSendEmailLink: false,
                    shouldSendSmsCode: false
                });
            }
        }
    });

    //#endregion

    //#region Event Handlers

    /**
     * Handles the event where the passwordless login start form is submitted.
     */
    function onPasswordlessLoginStartSubmitted(): void {
        emit("start");
    }

    //#endregion
</script>