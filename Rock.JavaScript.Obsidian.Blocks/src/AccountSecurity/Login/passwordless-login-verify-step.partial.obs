<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockForm
        v-model:submit="internalSubmitPasswordlessLoginVerification"
        @submit="onPasswordlessLoginVerifySubmitted">

        <div class="mb-2">Please enter your confirmation code below.</div>

        <CodeBox
            v-model.capitalize="internalCode"
            :disabled="disabled"
            :maxLength="maxLength"
            rules="required"
            validationTitle="Code"></CodeBox>

        <template v-if="modelValue.isPersonSelectionRequired">
            <p>The {{ internalCommunicationType }} you provided is matched to several different individuals. Please select the one that is you.</p>
            <RadioButtonList
                v-model="internalMatchingPersonValue"
                v-model:items="internalMatchingPeople"></RadioButtonList>
        </template>

        <RockButton
            :btnType="buttonType.primary"
            :class="isMobileForced ? 'w-100' : 'w-100 d-sm-none'"
            :disabled="disabled"
            type="submit">Complete Sign In</RockButton>
        <RockButton
            v-if="!isMobileForced"
            :btnType="buttonType.primary"
            class="d-none d-sm-inline-block"
            :disabled="disabled"
            type="submit">Complete Sign In</RockButton>

        <RockButton
            autoDisable
            :btnType="buttonType.action"
            :class="isMobileForced ? 'w-100 mt-2' : 'w-100 mt-2 d-sm-none'"
            :disabled="disabled"
            type="button"
            @click="onResendCodeClicked">Resend code</RockButton>
        <RockButton
            v-if="!isMobileForced"
            autoDisable
            :btnType="buttonType.action"
            class="d-none d-sm-inline-block ml-1"
            :disabled="disabled"
            type="button"
            @click="onResendCodeClicked">Resend code</RockButton>
    </RockForm>
</template>

<script setup lang="ts">
    import { PasswordlessCommunicationType } from "./passwordless-communication-type";
    import CodeBox from "./codeBox.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockForm from "@Obsidian/Controls/rockForm";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { PasswordlessLoginVerifyOptionsBag } from "@Obsidian/ViewModels/Blocks/AccountSecurity/Login/passwordlessLoginVerifyOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { computed, PropType, ref } from "vue";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PasswordlessLoginVerifyOptionsBag>,
            required: true
        },
        communicationType: {
            type: String as PropType<PasswordlessCommunicationType>,
            required: false,
            default: "data"
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        submitPasswordlessLoginVerification: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "resendCode"): void,
        (e: "update:submitPasswordlessLoginVerification", _value: boolean): void
        (e: "update:modelValue", _value: PasswordlessLoginVerifyOptionsBag),
        (e: "verify"): void,
    }>();

    //#region Values

    const buttonType = {
        action: BtnType.Action,
        primary: BtnType.Primary
    };

    const maxLength = ref(6);

    const internalSubmitPasswordlessLoginVerification = useVModelPassthrough(props, "submitPasswordlessLoginVerification", emit);

    //#endregion

    //#region Computed Values

    const internalCode = computed({
        get() {
            return props.modelValue.code || "";
        },
        set(newValue: string) {
            emit("update:modelValue", {
                ...props.modelValue,
                code: newValue
            });
        }
    });

    const internalCommunicationType = computed(() => props.communicationType || "data");

    const internalMatchingPeople = computed({
        get() {
            return props.modelValue.matchingPeople ?? [];
        },
        set(newValue: ListItemBag[]) {
            emit("update:modelValue", {
                ...props.modelValue,
                matchingPeople: newValue
            });
        }
    });

    const internalMatchingPersonValue = computed({
        get() {
            return props.modelValue.matchingPersonValue || "";
        },
        set(newValue: string) {
            emit("update:modelValue", {
                ...props.modelValue,
                matchingPersonValue: newValue
            });
        }
    });

    //#endregion

    //#region Event Handlers

    function onPasswordlessLoginVerifySubmitted(): void {
        emit("verify");
    }

    function onResendCodeClicked(): void {
        internalCode.value = "";
        internalMatchingPersonValue.value = "";
        internalMatchingPeople.value = [];
        emit("resendCode");
    }

    //#endregion
</script>